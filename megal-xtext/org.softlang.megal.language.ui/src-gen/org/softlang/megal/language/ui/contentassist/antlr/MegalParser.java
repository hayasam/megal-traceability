/*
* generated by Xtext
*/
package org.softlang.megal.language.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.softlang.megal.language.services.MegalGrammarAccess;

public class MegalParser extends AbstractContentAssistParser {
	
	@Inject
	private MegalGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.softlang.megal.language.ui.contentassist.antlr.internal.InternalMegalParser createParser() {
		org.softlang.megal.language.ui.contentassist.antlr.internal.InternalMegalParser result = new org.softlang.megal.language.ui.contentassist.antlr.internal.InternalMegalParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getMegamodelAccess().getAlternatives_3(), "rule__Megamodel__Alternatives_3");
					put(grammarAccess.getDeclarationAccess().getAlternatives(), "rule__Declaration__Alternatives");
					put(grammarAccess.getEntityTypeAccess().getAlternatives_3(), "rule__EntityType__Alternatives_3");
					put(grammarAccess.getEntityAccess().getAlternatives_1(), "rule__Entity__Alternatives_1");
					put(grammarAccess.getTypeReferenceAccess().getAlternatives(), "rule__TypeReference__Alternatives");
					put(grammarAccess.getIDAccess().getAlternatives(), "rule__ID__Alternatives");
					put(grammarAccess.getMegamodelAccess().getGroup(), "rule__Megamodel__Group__0");
					put(grammarAccess.getMegamodelAccess().getGroup_3_0(), "rule__Megamodel__Group_3_0__0");
					put(grammarAccess.getPrefixAnnotationAccess().getGroup(), "rule__PrefixAnnotation__Group__0");
					put(grammarAccess.getShowNameAnnotationAccess().getGroup(), "rule__ShowNameAnnotation__Group__0");
					put(grammarAccess.getLinkAccess().getGroup(), "rule__Link__Group__0");
					put(grammarAccess.getLinkAccess().getGroup_2(), "rule__Link__Group_2__0");
					put(grammarAccess.getEntityTypeAccess().getGroup(), "rule__EntityType__Group__0");
					put(grammarAccess.getEntityTypeAccess().getGroup_3_0(), "rule__EntityType__Group_3_0__0");
					put(grammarAccess.getEntityTypeAccess().getGroup_3_1(), "rule__EntityType__Group_3_1__0");
					put(grammarAccess.getRelationshipTypeAccess().getGroup(), "rule__RelationshipType__Group__0");
					put(grammarAccess.getEntityAccess().getGroup(), "rule__Entity__Group__0");
					put(grammarAccess.getRelationshipAccess().getGroup(), "rule__Relationship__Group__0");
					put(grammarAccess.getFunctionApplicationAccess().getGroup(), "rule__FunctionApplication__Group__0");
					put(grammarAccess.getFunctionTypeReferenceAccess().getGroup(), "rule__FunctionTypeReference__Group__0");
					put(grammarAccess.getEntityTypeReferenceAccess().getGroup(), "rule__EntityTypeReference__Group__0");
					put(grammarAccess.getQIDAccess().getGroup(), "rule__QID__Group__0");
					put(grammarAccess.getQIDAccess().getGroup_1(), "rule__QID__Group_1__0");
					put(grammarAccess.getNAMEAccess().getGroup(), "rule__NAME__Group__0");
					put(grammarAccess.getNAMEAccess().getGroup_1(), "rule__NAME__Group_1__0");
					put(grammarAccess.getMegamodelAccess().getAnnotationsAssignment_0(), "rule__Megamodel__AnnotationsAssignment_0");
					put(grammarAccess.getMegamodelAccess().getNameAssignment_2(), "rule__Megamodel__NameAssignment_2");
					put(grammarAccess.getMegamodelAccess().getImportsAssignment_3_0_1(), "rule__Megamodel__ImportsAssignment_3_0_1");
					put(grammarAccess.getMegamodelAccess().getDeclarationsAssignment_3_1(), "rule__Megamodel__DeclarationsAssignment_3_1");
					put(grammarAccess.getMegamodelAccess().getBindingsAssignment_3_2(), "rule__Megamodel__BindingsAssignment_3_2");
					put(grammarAccess.getPrefixAnnotationAccess().getKeyAssignment_1(), "rule__PrefixAnnotation__KeyAssignment_1");
					put(grammarAccess.getPrefixAnnotationAccess().getValueAssignment_2(), "rule__PrefixAnnotation__ValueAssignment_2");
					put(grammarAccess.getShowNameAnnotationAccess().getValueAssignment_1(), "rule__ShowNameAnnotation__ValueAssignment_1");
					put(grammarAccess.getLinkAccess().getAnnotationsAssignment_0(), "rule__Link__AnnotationsAssignment_0");
					put(grammarAccess.getLinkAccess().getLinkAssignment_1(), "rule__Link__LinkAssignment_1");
					put(grammarAccess.getLinkAccess().getInputAssignment_2_1(), "rule__Link__InputAssignment_2_1");
					put(grammarAccess.getLinkAccess().getOutputAssignment_2_5(), "rule__Link__OutputAssignment_2_5");
					put(grammarAccess.getLinkAccess().getToAssignment_4(), "rule__Link__ToAssignment_4");
					put(grammarAccess.getEntityTypeAccess().getAnnotationsAssignment_0(), "rule__EntityType__AnnotationsAssignment_0");
					put(grammarAccess.getEntityTypeAccess().getNameAssignment_1(), "rule__EntityType__NameAssignment_1");
					put(grammarAccess.getEntityTypeAccess().getAnnotationsAssignment_2(), "rule__EntityType__AnnotationsAssignment_2");
					put(grammarAccess.getEntityTypeAccess().getSupertypeAssignment_3_0_1(), "rule__EntityType__SupertypeAssignment_3_0_1");
					put(grammarAccess.getRelationshipTypeAccess().getAnnotationsAssignment_0(), "rule__RelationshipType__AnnotationsAssignment_0");
					put(grammarAccess.getRelationshipTypeAccess().getNameAssignment_1(), "rule__RelationshipType__NameAssignment_1");
					put(grammarAccess.getRelationshipTypeAccess().getAnnotationsAssignment_2(), "rule__RelationshipType__AnnotationsAssignment_2");
					put(grammarAccess.getRelationshipTypeAccess().getLeftAssignment_4(), "rule__RelationshipType__LeftAssignment_4");
					put(grammarAccess.getRelationshipTypeAccess().getRightAssignment_6(), "rule__RelationshipType__RightAssignment_6");
					put(grammarAccess.getEntityAccess().getAnnotationsAssignment_0(), "rule__Entity__AnnotationsAssignment_0");
					put(grammarAccess.getEntityAccess().getDependentAssignment_1_0(), "rule__Entity__DependentAssignment_1_0");
					put(grammarAccess.getEntityAccess().getParameterAssignment_1_1(), "rule__Entity__ParameterAssignment_1_1");
					put(grammarAccess.getEntityAccess().getNameAssignment_2(), "rule__Entity__NameAssignment_2");
					put(grammarAccess.getEntityAccess().getAnnotationsAssignment_3(), "rule__Entity__AnnotationsAssignment_3");
					put(grammarAccess.getEntityAccess().getTypeAssignment_5(), "rule__Entity__TypeAssignment_5");
					put(grammarAccess.getRelationshipAccess().getAnnotationsAssignment_0(), "rule__Relationship__AnnotationsAssignment_0");
					put(grammarAccess.getRelationshipAccess().getLeftAssignment_1(), "rule__Relationship__LeftAssignment_1");
					put(grammarAccess.getRelationshipAccess().getTypeAssignment_2(), "rule__Relationship__TypeAssignment_2");
					put(grammarAccess.getRelationshipAccess().getRightAssignment_3(), "rule__Relationship__RightAssignment_3");
					put(grammarAccess.getFunctionApplicationAccess().getAnnotationsAssignment_0(), "rule__FunctionApplication__AnnotationsAssignment_0");
					put(grammarAccess.getFunctionApplicationAccess().getFunctionAssignment_1(), "rule__FunctionApplication__FunctionAssignment_1");
					put(grammarAccess.getFunctionApplicationAccess().getInputAssignment_3(), "rule__FunctionApplication__InputAssignment_3");
					put(grammarAccess.getFunctionApplicationAccess().getOutputAssignment_7(), "rule__FunctionApplication__OutputAssignment_7");
					put(grammarAccess.getFunctionTypeReferenceAccess().getDefinitionAssignment_0(), "rule__FunctionTypeReference__DefinitionAssignment_0");
					put(grammarAccess.getFunctionTypeReferenceAccess().getDomainAssignment_2(), "rule__FunctionTypeReference__DomainAssignment_2");
					put(grammarAccess.getFunctionTypeReferenceAccess().getCodomainAssignment_4(), "rule__FunctionTypeReference__CodomainAssignment_4");
					put(grammarAccess.getEntityTypeReferenceAccess().getDefinitionAssignment_0(), "rule__EntityTypeReference__DefinitionAssignment_0");
					put(grammarAccess.getEntityTypeReferenceAccess().getManyAssignment_1(), "rule__EntityTypeReference__ManyAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.softlang.megal.language.ui.contentassist.antlr.internal.InternalMegalParser typedParser = (org.softlang.megal.language.ui.contentassist.antlr.internal.InternalMegalParser) parser;
			typedParser.entryRuleMegamodel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public MegalGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(MegalGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
