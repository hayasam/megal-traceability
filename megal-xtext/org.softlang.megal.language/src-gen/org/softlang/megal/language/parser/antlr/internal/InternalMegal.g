/*
* generated by Xtext
*/
grammar InternalMegal;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.softlang.megal.language.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.softlang.megal.language.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.softlang.megal.language.services.MegalGrammarAccess;

}

@parser::members {

 	private MegalGrammarAccess grammarAccess;
 	
    public InternalMegalParser(TokenStream input, MegalGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Megamodel";	
   	}
   	
   	@Override
   	protected MegalGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleMegamodel
entryRuleMegamodel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMegamodelRule()); }
	 iv_ruleMegamodel=ruleMegamodel 
	 { $current=$iv_ruleMegamodel.current; } 
	 EOF 
;

// Rule Megamodel
ruleMegamodel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMegamodelAccess().getAnnotationsPrefixAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=rulePrefixAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMegamodelRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"PrefixAnnotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='model' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMegamodelAccess().getModelKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMegamodelAccess().getNameQIDParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleQID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMegamodelRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"QID");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_3='import' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMegamodelAccess().getImportKeyword_3_0_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMegamodelRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getMegamodelAccess().getImportsMegamodelCrossReference_3_0_1_0()); 
	    }
		ruleQID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getMegamodelAccess().getDeclarationsDeclarationParserRuleCall_3_1_0()); 
	    }
		lv_declarations_5_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMegamodelRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_5_0, 
        		"Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getMegamodelAccess().getBindingsLinkParserRuleCall_3_2_0()); 
	    }
		lv_bindings_6_0=ruleLink		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMegamodelRule());
	        }
       		add(
       			$current, 
       			"bindings",
        		lv_bindings_6_0, 
        		"Link");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleDeclaration
entryRuleDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclarationRule()); }
	 iv_ruleDeclaration=ruleDeclaration 
	 { $current=$iv_ruleDeclaration.current; } 
	 EOF 
;

// Rule Declaration
ruleDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getEntityTypeParserRuleCall_0()); 
    }
    this_EntityType_0=ruleEntityType
    { 
        $current = $this_EntityType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getRelationshipTypeParserRuleCall_1()); 
    }
    this_RelationshipType_1=ruleRelationshipType
    { 
        $current = $this_RelationshipType_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getEntityParserRuleCall_2()); 
    }
    this_Entity_2=ruleEntity
    { 
        $current = $this_Entity_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getRelationshipParserRuleCall_3()); 
    }
    this_Relationship_3=ruleRelationship
    { 
        $current = $this_Relationship_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclarationAccess().getFunctionApplicationParserRuleCall_4()); 
    }
    this_FunctionApplication_4=ruleFunctionApplication
    { 
        $current = $this_FunctionApplication_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePrefixAnnotation
entryRulePrefixAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrefixAnnotationRule()); }
	 iv_rulePrefixAnnotation=rulePrefixAnnotation 
	 { $current=$iv_rulePrefixAnnotation.current; } 
	 EOF 
;

// Rule PrefixAnnotation
rulePrefixAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPrefixAnnotationAccess().getCommercialAtKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrefixAnnotationAccess().getKeyQIDParserRuleCall_1_0()); 
	    }
		lv_key_1_0=ruleQID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrefixAnnotationRule());
	        }
       		set(
       			$current, 
       			"key",
        		lv_key_1_0, 
        		"QID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_value_2_0=RULE_STRING
		{
			newLeafNode(lv_value_2_0, grammarAccess.getPrefixAnnotationAccess().getValueSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrefixAnnotationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"STRING");
	    }

)
)?)
;





// Entry rule entryRuleShowNameAnnotation
entryRuleShowNameAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getShowNameAnnotationRule()); }
	 iv_ruleShowNameAnnotation=ruleShowNameAnnotation 
	 { $current=$iv_ruleShowNameAnnotation.current; } 
	 EOF 
;

// Rule ShowNameAnnotation
ruleShowNameAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getShowNameAnnotationAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		lv_value_1_0=RULE_STRING
		{
			newLeafNode(lv_value_1_0, grammarAccess.getShowNameAnnotationAccess().getValueSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getShowNameAnnotationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"STRING");
	    }

)
)	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getShowNameAnnotationAccess().getRightSquareBracketKeyword_2());
    }
)
;





// Entry rule entryRuleLink
entryRuleLink returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLinkRule()); }
	 iv_ruleLink=ruleLink 
	 { $current=$iv_ruleLink.current; } 
	 EOF 
;

// Rule Link
ruleLink returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLinkAccess().getAnnotationsPrefixAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=rulePrefixAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLinkRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"PrefixAnnotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLinkRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getLinkAccess().getLinkEntityCrossReference_1_0()); 
	    }
		ruleQID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLinkAccess().getLeftParenthesisKeyword_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLinkRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getLinkAccess().getInputEntityCrossReference_2_1_0()); 
	    }
		ruleQID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLinkAccess().getRightParenthesisKeyword_2_2());
    }
	otherlv_5='|' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getLinkAccess().getVerticalLineKeyword_2_3());
    }
	otherlv_6='->' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getLinkAccess().getHyphenMinusGreaterThanSignKeyword_2_4());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLinkRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getLinkAccess().getOutputEntityCrossReference_2_5_0()); 
	    }
		ruleQID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_8='=' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getLinkAccess().getEqualsSignKeyword_3());
    }
(
(
		lv_to_9_0=RULE_STRING
		{
			newLeafNode(lv_to_9_0, grammarAccess.getLinkAccess().getToSTRINGTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLinkRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"to",
        		lv_to_9_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleEntityType
entryRuleEntityType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEntityTypeRule()); }
	 iv_ruleEntityType=ruleEntityType 
	 { $current=$iv_ruleEntityType.current; } 
	 EOF 
;

// Rule EntityType
ruleEntityType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEntityTypeAccess().getAnnotationsPrefixAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=rulePrefixAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEntityTypeRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"PrefixAnnotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getEntityTypeAccess().getNameQIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleQID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEntityTypeRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"QID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEntityTypeAccess().getAnnotationsShowNameAnnotationParserRuleCall_2_0()); 
	    }
		lv_annotations_2_0=ruleShowNameAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEntityTypeRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_2_0, 
        		"ShowNameAnnotation");
	        afterParserOrEnumRuleCall();
	    }

)
)?((	otherlv_3='<' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getEntityTypeAccess().getLessThanSignKeyword_3_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEntityTypeAccess().getSupertypeTypeReferenceParserRuleCall_3_0_1_0()); 
	    }
		lv_supertype_4_0=ruleTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEntityTypeRule());
	        }
       		set(
       			$current, 
       			"supertype",
        		lv_supertype_4_0, 
        		"TypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_5='as' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getEntityTypeAccess().getAsKeyword_3_1_0());
    }
	otherlv_6='entity' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getEntityTypeAccess().getEntityKeyword_3_1_1());
    }
)))
;





// Entry rule entryRuleRelationshipType
entryRuleRelationshipType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationshipTypeRule()); }
	 iv_ruleRelationshipType=ruleRelationshipType 
	 { $current=$iv_ruleRelationshipType.current; } 
	 EOF 
;

// Rule RelationshipType
ruleRelationshipType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRelationshipTypeAccess().getAnnotationsPrefixAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=rulePrefixAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationshipTypeRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"PrefixAnnotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationshipTypeAccess().getNameQIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleQID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationshipTypeRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"QID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationshipTypeAccess().getAnnotationsShowNameAnnotationParserRuleCall_2_0()); 
	    }
		lv_annotations_2_0=ruleShowNameAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationshipTypeRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_2_0, 
        		"ShowNameAnnotation");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3='<' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRelationshipTypeAccess().getLessThanSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationshipTypeAccess().getLeftTypeReferenceParserRuleCall_4_0()); 
	    }
		lv_left_4_0=ruleTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationshipTypeRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_4_0, 
        		"TypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='*' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRelationshipTypeAccess().getAsteriskKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationshipTypeAccess().getRightTypeReferenceParserRuleCall_6_0()); 
	    }
		lv_right_6_0=ruleTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationshipTypeRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_6_0, 
        		"TypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleEntity
entryRuleEntity returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEntityRule()); }
	 iv_ruleEntity=ruleEntity 
	 { $current=$iv_ruleEntity.current; } 
	 EOF 
;

// Rule Entity
ruleEntity returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEntityAccess().getAnnotationsPrefixAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=rulePrefixAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEntityRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"PrefixAnnotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*((
(
		lv_dependent_1_0=	'?' 
    {
        newLeafNode(lv_dependent_1_0, grammarAccess.getEntityAccess().getDependentQuestionMarkKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEntityRule());
	        }
       		setWithLastConsumed($current, "dependent", true, "?");
	    }

)
)
    |(
(
		lv_parameter_2_0=	'!' 
    {
        newLeafNode(lv_parameter_2_0, grammarAccess.getEntityAccess().getParameterExclamationMarkKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEntityRule());
	        }
       		setWithLastConsumed($current, "parameter", true, "!");
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getEntityAccess().getNameQIDParserRuleCall_2_0()); 
	    }
		lv_name_3_0=ruleQID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEntityRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"QID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEntityAccess().getAnnotationsShowNameAnnotationParserRuleCall_3_0()); 
	    }
		lv_annotations_4_0=ruleShowNameAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEntityRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_4_0, 
        		"ShowNameAnnotation");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_5=':' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getEntityAccess().getColonKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEntityAccess().getTypeTypeReferenceParserRuleCall_5_0()); 
	    }
		lv_type_6_0=ruleTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEntityRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_6_0, 
        		"TypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleRelationship
entryRuleRelationship returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationshipRule()); }
	 iv_ruleRelationship=ruleRelationship 
	 { $current=$iv_ruleRelationship.current; } 
	 EOF 
;

// Rule Relationship
ruleRelationship returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRelationshipAccess().getAnnotationsPrefixAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=rulePrefixAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationshipRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"PrefixAnnotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationshipRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getRelationshipAccess().getLeftEntityCrossReference_1_0()); 
	    }
		ruleQID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationshipRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getRelationshipAccess().getTypeRelationshipTypeCrossReference_2_0()); 
	    }
		ruleQID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationshipRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getRelationshipAccess().getRightEntityCrossReference_3_0()); 
	    }
		ruleQID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFunctionApplication
entryRuleFunctionApplication returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionApplicationRule()); }
	 iv_ruleFunctionApplication=ruleFunctionApplication 
	 { $current=$iv_ruleFunctionApplication.current; } 
	 EOF 
;

// Rule FunctionApplication
ruleFunctionApplication returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionApplicationAccess().getAnnotationsPrefixAnnotationParserRuleCall_0_0()); 
	    }
		lv_annotations_0_0=rulePrefixAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionApplicationRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_0_0, 
        		"PrefixAnnotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionApplicationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFunctionApplicationAccess().getFunctionEntityCrossReference_1_0()); 
	    }
		ruleQID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFunctionApplicationAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionApplicationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFunctionApplicationAccess().getInputEntityCrossReference_3_0()); 
	    }
		ruleQID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFunctionApplicationAccess().getRightParenthesisKeyword_4());
    }
	otherlv_5='|' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFunctionApplicationAccess().getVerticalLineKeyword_5());
    }
	otherlv_6='->' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFunctionApplicationAccess().getHyphenMinusGreaterThanSignKeyword_6());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionApplicationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFunctionApplicationAccess().getOutputEntityCrossReference_7_0()); 
	    }
		ruleQID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTypeReference
entryRuleTypeReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeReferenceRule()); }
	 iv_ruleTypeReference=ruleTypeReference 
	 { $current=$iv_ruleTypeReference.current; } 
	 EOF 
;

// Rule TypeReference
ruleTypeReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeReferenceAccess().getFunctionTypeReferenceParserRuleCall_0()); 
    }
    this_FunctionTypeReference_0=ruleFunctionTypeReference
    { 
        $current = $this_FunctionTypeReference_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeReferenceAccess().getEntityTypeReferenceParserRuleCall_1()); 
    }
    this_EntityTypeReference_1=ruleEntityTypeReference
    { 
        $current = $this_EntityTypeReference_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFunctionTypeReference
entryRuleFunctionTypeReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionTypeReferenceRule()); }
	 iv_ruleFunctionTypeReference=ruleFunctionTypeReference 
	 { $current=$iv_ruleFunctionTypeReference.current; } 
	 EOF 
;

// Rule FunctionTypeReference
ruleFunctionTypeReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionTypeReferenceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFunctionTypeReferenceAccess().getDefinitionEntityTypeCrossReference_0_0()); 
	    }
		ruleQID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunctionTypeReferenceAccess().getLeftSquareBracketKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionTypeReferenceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFunctionTypeReferenceAccess().getDomainEntityCrossReference_2_0()); 
	    }
		ruleQID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='->' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionTypeReferenceAccess().getHyphenMinusGreaterThanSignKeyword_3());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionTypeReferenceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFunctionTypeReferenceAccess().getCodomainEntityCrossReference_4_0()); 
	    }
		ruleQID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFunctionTypeReferenceAccess().getRightSquareBracketKeyword_5());
    }
)
;





// Entry rule entryRuleEntityTypeReference
entryRuleEntityTypeReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEntityTypeReferenceRule()); }
	 iv_ruleEntityTypeReference=ruleEntityTypeReference 
	 { $current=$iv_ruleEntityTypeReference.current; } 
	 EOF 
;

// Rule EntityTypeReference
ruleEntityTypeReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEntityTypeReferenceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getEntityTypeReferenceAccess().getDefinitionEntityTypeCrossReference_0_0()); 
	    }
		ruleQID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_many_1_0=	'+' 
    {
        newLeafNode(lv_many_1_0, grammarAccess.getEntityTypeReferenceAccess().getManyPlusSignKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEntityTypeReferenceRule());
	        }
       		setWithLastConsumed($current, "many", true, "+");
	    }

)
)?)
;





// Entry rule entryRuleQID
entryRuleQID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQIDRule()); } 
	 iv_ruleQID=ruleQID 
	 { $current=$iv_ruleQID.current.getText(); }  
	 EOF 
;

// Rule QID
ruleQID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQIDAccess().getNAMEParserRuleCall_0()); 
    }
    this_NAME_0=ruleNAME    {
		$current.merge(this_NAME_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='::' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQIDAccess().getColonColonKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getQIDAccess().getNAMEParserRuleCall_1_1()); 
    }
    this_NAME_2=ruleNAME    {
		$current.merge(this_NAME_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleNAME
entryRuleNAME returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNAMERule()); } 
	 iv_ruleNAME=ruleNAME 
	 { $current=$iv_ruleNAME.current.getText(); }  
	 EOF 
;

// Rule NAME
ruleNAME returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNAMEAccess().getIDParserRuleCall_0()); 
    }
    this_ID_0=ruleID    {
		$current.merge(this_ID_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNAMEAccess().getFullStopKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getNAMEAccess().getIDParserRuleCall_1_1()); 
    }
    this_ID_2=ruleID    {
		$current.merge(this_ID_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleID
entryRuleID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIDRule()); } 
	 iv_ruleID=ruleID 
	 { $current=$iv_ruleID.current.getText(); }  
	 EOF 
;

// Rule ID
ruleID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_UCID_0=RULE_UCID    {
		$current.merge(this_UCID_0);
    }

    { 
    newLeafNode(this_UCID_0, grammarAccess.getIDAccess().getUCIDTerminalRuleCall_0()); 
    }

    |    this_LCID_1=RULE_LCID    {
		$current.merge(this_LCID_1);
    }

    { 
    newLeafNode(this_LCID_1, grammarAccess.getIDAccess().getLCIDTerminalRuleCall_1()); 
    }
)
    ;





RULE_UCID : '^'? ('A'..'Z'|'0'..'9') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_LCID : '^'? ('a'..'z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

fragment RULE_SEGMENT : ('A'..'Z'|'a'..'z'|'0'..'9'|'-'|'.'|'_'|'~'|':'|'?'|'#'|'['|']'|'@'|'!'|'$'|'&'|'\''|'('|')'|'*'|'+'|','|';'|'=')+;


