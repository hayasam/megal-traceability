/*
* generated by Xtext
*/
package org.softlang.megal.language.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class MegalGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class MegamodelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Megamodel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsPrefixAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cModelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cImportKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cImportsAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final CrossReference cImportsMegamodelCrossReference_3_0_1_0 = (CrossReference)cImportsAssignment_3_0_1.eContents().get(0);
		private final RuleCall cImportsMegamodelQIDParserRuleCall_3_0_1_0_1 = (RuleCall)cImportsMegamodelCrossReference_3_0_1_0.eContents().get(1);
		private final Assignment cDeclarationsAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_3_1_0 = (RuleCall)cDeclarationsAssignment_3_1.eContents().get(0);
		private final Assignment cBindingsAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cBindingsLinkParserRuleCall_3_2_0 = (RuleCall)cBindingsAssignment_3_2.eContents().get(0);
		
		//Megamodel:
		//	annotations+=PrefixAnnotation* "model" name=QID ("import" imports+=[Megamodel|QID] | declarations+=Declaration |
		//	bindings+=Link)*;
		public ParserRule getRule() { return rule; }

		//annotations+=PrefixAnnotation* "model" name=QID ("import" imports+=[Megamodel|QID] | declarations+=Declaration |
		//bindings+=Link)*
		public Group getGroup() { return cGroup; }

		//annotations+=PrefixAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//PrefixAnnotation
		public RuleCall getAnnotationsPrefixAnnotationParserRuleCall_0_0() { return cAnnotationsPrefixAnnotationParserRuleCall_0_0; }

		//"model"
		public Keyword getModelKeyword_1() { return cModelKeyword_1; }

		//name=QID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//QID
		public RuleCall getNameQIDParserRuleCall_2_0() { return cNameQIDParserRuleCall_2_0; }

		//("import" imports+=[Megamodel|QID] | declarations+=Declaration | bindings+=Link)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//"import" imports+=[Megamodel|QID]
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"import"
		public Keyword getImportKeyword_3_0_0() { return cImportKeyword_3_0_0; }

		//imports+=[Megamodel|QID]
		public Assignment getImportsAssignment_3_0_1() { return cImportsAssignment_3_0_1; }

		//[Megamodel|QID]
		public CrossReference getImportsMegamodelCrossReference_3_0_1_0() { return cImportsMegamodelCrossReference_3_0_1_0; }

		//QID
		public RuleCall getImportsMegamodelQIDParserRuleCall_3_0_1_0_1() { return cImportsMegamodelQIDParserRuleCall_3_0_1_0_1; }

		//declarations+=Declaration
		public Assignment getDeclarationsAssignment_3_1() { return cDeclarationsAssignment_3_1; }

		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_3_1_0() { return cDeclarationsDeclarationParserRuleCall_3_1_0; }

		//bindings+=Link
		public Assignment getBindingsAssignment_3_2() { return cBindingsAssignment_3_2; }

		//Link
		public RuleCall getBindingsLinkParserRuleCall_3_2_0() { return cBindingsLinkParserRuleCall_3_2_0; }
	}

	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntityTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRelationshipTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEntityParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRelationshipParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFunctionApplicationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Declaration:
		//	EntityType | RelationshipType | Entity | Relationship | FunctionApplication;
		public ParserRule getRule() { return rule; }

		//EntityType | RelationshipType | Entity | Relationship | FunctionApplication
		public Alternatives getAlternatives() { return cAlternatives; }

		//EntityType
		public RuleCall getEntityTypeParserRuleCall_0() { return cEntityTypeParserRuleCall_0; }

		//RelationshipType
		public RuleCall getRelationshipTypeParserRuleCall_1() { return cRelationshipTypeParserRuleCall_1; }

		//Entity
		public RuleCall getEntityParserRuleCall_2() { return cEntityParserRuleCall_2; }

		//Relationship
		public RuleCall getRelationshipParserRuleCall_3() { return cRelationshipParserRuleCall_3; }

		//FunctionApplication
		public RuleCall getFunctionApplicationParserRuleCall_4() { return cFunctionApplicationParserRuleCall_4; }
	}

	public class PrefixAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrefixAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeyQIDParserRuleCall_1_0 = (RuleCall)cKeyAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//PrefixAnnotation returns Annotation:
		//	"@" key=QID value=STRING?;
		public ParserRule getRule() { return rule; }

		//"@" key=QID value=STRING?
		public Group getGroup() { return cGroup; }

		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//key=QID
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }

		//QID
		public RuleCall getKeyQIDParserRuleCall_1_0() { return cKeyQIDParserRuleCall_1_0; }

		//value=STRING?
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}

	public class ShowNameAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShowNameAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ShowNameAnnotation returns Annotation:
		//	"[" value=STRING "]";
		public ParserRule getRule() { return rule; }

		//"[" value=STRING "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class LinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Link");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsPrefixAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cLinkAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cLinkEntityCrossReference_1_0 = (CrossReference)cLinkAssignment_1.eContents().get(0);
		private final RuleCall cLinkEntityQIDParserRuleCall_1_0_1 = (RuleCall)cLinkEntityCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInputAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cInputEntityCrossReference_2_1_0 = (CrossReference)cInputAssignment_2_1.eContents().get(0);
		private final RuleCall cInputEntityQIDParserRuleCall_2_1_0_1 = (RuleCall)cInputEntityCrossReference_2_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cVerticalLineKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Assignment cOutputAssignment_2_5 = (Assignment)cGroup_2.eContents().get(5);
		private final CrossReference cOutputEntityCrossReference_2_5_0 = (CrossReference)cOutputAssignment_2_5.eContents().get(0);
		private final RuleCall cOutputEntityQIDParserRuleCall_2_5_0_1 = (RuleCall)cOutputEntityCrossReference_2_5_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cToAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cToSTRINGTerminalRuleCall_4_0 = (RuleCall)cToAssignment_4.eContents().get(0);
		
		//Link:
		//	annotations+=PrefixAnnotation* link=[Entity|QID] ("(" input=[Entity|QID] ")" "|" "->" output=[Entity|QID])? "="
		//	to=STRING;
		public ParserRule getRule() { return rule; }

		//annotations+=PrefixAnnotation* link=[Entity|QID] ("(" input=[Entity|QID] ")" "|" "->" output=[Entity|QID])? "="
		//to=STRING
		public Group getGroup() { return cGroup; }

		//annotations+=PrefixAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//PrefixAnnotation
		public RuleCall getAnnotationsPrefixAnnotationParserRuleCall_0_0() { return cAnnotationsPrefixAnnotationParserRuleCall_0_0; }

		//link=[Entity|QID]
		public Assignment getLinkAssignment_1() { return cLinkAssignment_1; }

		//[Entity|QID]
		public CrossReference getLinkEntityCrossReference_1_0() { return cLinkEntityCrossReference_1_0; }

		//QID
		public RuleCall getLinkEntityQIDParserRuleCall_1_0_1() { return cLinkEntityQIDParserRuleCall_1_0_1; }

		//("(" input=[Entity|QID] ")" "|" "->" output=[Entity|QID])?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//input=[Entity|QID]
		public Assignment getInputAssignment_2_1() { return cInputAssignment_2_1; }

		//[Entity|QID]
		public CrossReference getInputEntityCrossReference_2_1_0() { return cInputEntityCrossReference_2_1_0; }

		//QID
		public RuleCall getInputEntityQIDParserRuleCall_2_1_0_1() { return cInputEntityQIDParserRuleCall_2_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//"|"
		public Keyword getVerticalLineKeyword_2_3() { return cVerticalLineKeyword_2_3; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_2_4() { return cHyphenMinusGreaterThanSignKeyword_2_4; }

		//output=[Entity|QID]
		public Assignment getOutputAssignment_2_5() { return cOutputAssignment_2_5; }

		//[Entity|QID]
		public CrossReference getOutputEntityCrossReference_2_5_0() { return cOutputEntityCrossReference_2_5_0; }

		//QID
		public RuleCall getOutputEntityQIDParserRuleCall_2_5_0_1() { return cOutputEntityQIDParserRuleCall_2_5_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//to=STRING
		public Assignment getToAssignment_4() { return cToAssignment_4; }

		//STRING
		public RuleCall getToSTRINGTerminalRuleCall_4_0() { return cToSTRINGTerminalRuleCall_4_0; }
	}

	public class EntityTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EntityType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsPrefixAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnnotationsShowNameAnnotationParserRuleCall_2_0 = (RuleCall)cAnnotationsAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cLessThanSignKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cSupertypeAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cSupertypeTypeReferenceParserRuleCall_3_0_1_0 = (RuleCall)cSupertypeAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cAsKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Keyword cEntityKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		
		//EntityType:
		//	annotations+=PrefixAnnotation* name=QID annotations+=ShowNameAnnotation? ("<" supertype=TypeReference | "as"
		//	"entity");
		public ParserRule getRule() { return rule; }

		//annotations+=PrefixAnnotation* name=QID annotations+=ShowNameAnnotation? ("<" supertype=TypeReference | "as" "entity")
		public Group getGroup() { return cGroup; }

		//annotations+=PrefixAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//PrefixAnnotation
		public RuleCall getAnnotationsPrefixAnnotationParserRuleCall_0_0() { return cAnnotationsPrefixAnnotationParserRuleCall_0_0; }

		//name=QID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QID
		public RuleCall getNameQIDParserRuleCall_1_0() { return cNameQIDParserRuleCall_1_0; }

		//annotations+=ShowNameAnnotation?
		public Assignment getAnnotationsAssignment_2() { return cAnnotationsAssignment_2; }

		//ShowNameAnnotation
		public RuleCall getAnnotationsShowNameAnnotationParserRuleCall_2_0() { return cAnnotationsShowNameAnnotationParserRuleCall_2_0; }

		//"<" supertype=TypeReference | "as" "entity"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//"<" supertype=TypeReference
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"<"
		public Keyword getLessThanSignKeyword_3_0_0() { return cLessThanSignKeyword_3_0_0; }

		//supertype=TypeReference
		public Assignment getSupertypeAssignment_3_0_1() { return cSupertypeAssignment_3_0_1; }

		//TypeReference
		public RuleCall getSupertypeTypeReferenceParserRuleCall_3_0_1_0() { return cSupertypeTypeReferenceParserRuleCall_3_0_1_0; }

		//"as" "entity"
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"as"
		public Keyword getAsKeyword_3_1_0() { return cAsKeyword_3_1_0; }

		//"entity"
		public Keyword getEntityKeyword_3_1_1() { return cEntityKeyword_3_1_1; }
	}

	public class RelationshipTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationshipType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsPrefixAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cAnnotationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnnotationsShowNameAnnotationParserRuleCall_2_0 = (RuleCall)cAnnotationsAssignment_2.eContents().get(0);
		private final Keyword cLessThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLeftAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLeftTypeReferenceParserRuleCall_4_0 = (RuleCall)cLeftAssignment_4.eContents().get(0);
		private final Keyword cAsteriskKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRightAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRightTypeReferenceParserRuleCall_6_0 = (RuleCall)cRightAssignment_6.eContents().get(0);
		
		//RelationshipType:
		//	annotations+=PrefixAnnotation* name=QID annotations+=ShowNameAnnotation? "<" left=TypeReference "*"
		//	right=TypeReference;
		public ParserRule getRule() { return rule; }

		//annotations+=PrefixAnnotation* name=QID annotations+=ShowNameAnnotation? "<" left=TypeReference "*" right=TypeReference
		public Group getGroup() { return cGroup; }

		//annotations+=PrefixAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//PrefixAnnotation
		public RuleCall getAnnotationsPrefixAnnotationParserRuleCall_0_0() { return cAnnotationsPrefixAnnotationParserRuleCall_0_0; }

		//name=QID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QID
		public RuleCall getNameQIDParserRuleCall_1_0() { return cNameQIDParserRuleCall_1_0; }

		//annotations+=ShowNameAnnotation?
		public Assignment getAnnotationsAssignment_2() { return cAnnotationsAssignment_2; }

		//ShowNameAnnotation
		public RuleCall getAnnotationsShowNameAnnotationParserRuleCall_2_0() { return cAnnotationsShowNameAnnotationParserRuleCall_2_0; }

		//"<"
		public Keyword getLessThanSignKeyword_3() { return cLessThanSignKeyword_3; }

		//left=TypeReference
		public Assignment getLeftAssignment_4() { return cLeftAssignment_4; }

		//TypeReference
		public RuleCall getLeftTypeReferenceParserRuleCall_4_0() { return cLeftTypeReferenceParserRuleCall_4_0; }

		//"*"
		public Keyword getAsteriskKeyword_5() { return cAsteriskKeyword_5; }

		//right=TypeReference
		public Assignment getRightAssignment_6() { return cRightAssignment_6; }

		//TypeReference
		public RuleCall getRightTypeReferenceParserRuleCall_6_0() { return cRightTypeReferenceParserRuleCall_6_0; }
	}

	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsPrefixAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cDependentAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cDependentQuestionMarkKeyword_1_0_0 = (Keyword)cDependentAssignment_1_0.eContents().get(0);
		private final Assignment cParameterAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cParameterExclamationMarkKeyword_1_1_0 = (Keyword)cParameterAssignment_1_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cAnnotationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAnnotationsShowNameAnnotationParserRuleCall_3_0 = (RuleCall)cAnnotationsAssignment_3.eContents().get(0);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTypeTypeReferenceParserRuleCall_5_0 = (RuleCall)cTypeAssignment_5.eContents().get(0);
		
		//Entity:
		//	annotations+=PrefixAnnotation* (dependent?="?" | parameter?="!")? name=QID annotations+=ShowNameAnnotation? ":"
		//	type=TypeReference;
		public ParserRule getRule() { return rule; }

		//annotations+=PrefixAnnotation* (dependent?="?" | parameter?="!")? name=QID annotations+=ShowNameAnnotation? ":"
		//type=TypeReference
		public Group getGroup() { return cGroup; }

		//annotations+=PrefixAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//PrefixAnnotation
		public RuleCall getAnnotationsPrefixAnnotationParserRuleCall_0_0() { return cAnnotationsPrefixAnnotationParserRuleCall_0_0; }

		//(dependent?="?" | parameter?="!")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//dependent?="?"
		public Assignment getDependentAssignment_1_0() { return cDependentAssignment_1_0; }

		//"?"
		public Keyword getDependentQuestionMarkKeyword_1_0_0() { return cDependentQuestionMarkKeyword_1_0_0; }

		//parameter?="!"
		public Assignment getParameterAssignment_1_1() { return cParameterAssignment_1_1; }

		//"!"
		public Keyword getParameterExclamationMarkKeyword_1_1_0() { return cParameterExclamationMarkKeyword_1_1_0; }

		//name=QID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//QID
		public RuleCall getNameQIDParserRuleCall_2_0() { return cNameQIDParserRuleCall_2_0; }

		//annotations+=ShowNameAnnotation?
		public Assignment getAnnotationsAssignment_3() { return cAnnotationsAssignment_3; }

		//ShowNameAnnotation
		public RuleCall getAnnotationsShowNameAnnotationParserRuleCall_3_0() { return cAnnotationsShowNameAnnotationParserRuleCall_3_0; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//type=TypeReference
		public Assignment getTypeAssignment_5() { return cTypeAssignment_5; }

		//TypeReference
		public RuleCall getTypeTypeReferenceParserRuleCall_5_0() { return cTypeTypeReferenceParserRuleCall_5_0; }
	}

	public class RelationshipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Relationship");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsPrefixAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cLeftEntityCrossReference_1_0 = (CrossReference)cLeftAssignment_1.eContents().get(0);
		private final RuleCall cLeftEntityQIDParserRuleCall_1_0_1 = (RuleCall)cLeftEntityCrossReference_1_0.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeRelationshipTypeCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeRelationshipTypeQIDParserRuleCall_2_0_1 = (RuleCall)cTypeRelationshipTypeCrossReference_2_0.eContents().get(1);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRightEntityCrossReference_3_0 = (CrossReference)cRightAssignment_3.eContents().get(0);
		private final RuleCall cRightEntityQIDParserRuleCall_3_0_1 = (RuleCall)cRightEntityCrossReference_3_0.eContents().get(1);
		
		//Relationship:
		//	annotations+=PrefixAnnotation* left=[Entity|QID] type=[RelationshipType|QID] right=[Entity|QID];
		public ParserRule getRule() { return rule; }

		//annotations+=PrefixAnnotation* left=[Entity|QID] type=[RelationshipType|QID] right=[Entity|QID]
		public Group getGroup() { return cGroup; }

		//annotations+=PrefixAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//PrefixAnnotation
		public RuleCall getAnnotationsPrefixAnnotationParserRuleCall_0_0() { return cAnnotationsPrefixAnnotationParserRuleCall_0_0; }

		//left=[Entity|QID]
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }

		//[Entity|QID]
		public CrossReference getLeftEntityCrossReference_1_0() { return cLeftEntityCrossReference_1_0; }

		//QID
		public RuleCall getLeftEntityQIDParserRuleCall_1_0_1() { return cLeftEntityQIDParserRuleCall_1_0_1; }

		//type=[RelationshipType|QID]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[RelationshipType|QID]
		public CrossReference getTypeRelationshipTypeCrossReference_2_0() { return cTypeRelationshipTypeCrossReference_2_0; }

		//QID
		public RuleCall getTypeRelationshipTypeQIDParserRuleCall_2_0_1() { return cTypeRelationshipTypeQIDParserRuleCall_2_0_1; }

		//right=[Entity|QID]
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }

		//[Entity|QID]
		public CrossReference getRightEntityCrossReference_3_0() { return cRightEntityCrossReference_3_0; }

		//QID
		public RuleCall getRightEntityQIDParserRuleCall_3_0_1() { return cRightEntityQIDParserRuleCall_3_0_1; }
	}

	public class FunctionApplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionApplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsPrefixAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFunctionEntityCrossReference_1_0 = (CrossReference)cFunctionAssignment_1.eContents().get(0);
		private final RuleCall cFunctionEntityQIDParserRuleCall_1_0_1 = (RuleCall)cFunctionEntityCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInputAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cInputEntityCrossReference_3_0 = (CrossReference)cInputAssignment_3.eContents().get(0);
		private final RuleCall cInputEntityQIDParserRuleCall_3_0_1 = (RuleCall)cInputEntityCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cVerticalLineKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cOutputAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cOutputEntityCrossReference_7_0 = (CrossReference)cOutputAssignment_7.eContents().get(0);
		private final RuleCall cOutputEntityQIDParserRuleCall_7_0_1 = (RuleCall)cOutputEntityCrossReference_7_0.eContents().get(1);
		
		//FunctionApplication:
		//	annotations+=PrefixAnnotation* function=[Entity|QID] "(" input=[Entity|QID] ")" "|" "->" output=[Entity|QID];
		public ParserRule getRule() { return rule; }

		//annotations+=PrefixAnnotation* function=[Entity|QID] "(" input=[Entity|QID] ")" "|" "->" output=[Entity|QID]
		public Group getGroup() { return cGroup; }

		//annotations+=PrefixAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//PrefixAnnotation
		public RuleCall getAnnotationsPrefixAnnotationParserRuleCall_0_0() { return cAnnotationsPrefixAnnotationParserRuleCall_0_0; }

		//function=[Entity|QID]
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }

		//[Entity|QID]
		public CrossReference getFunctionEntityCrossReference_1_0() { return cFunctionEntityCrossReference_1_0; }

		//QID
		public RuleCall getFunctionEntityQIDParserRuleCall_1_0_1() { return cFunctionEntityQIDParserRuleCall_1_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//input=[Entity|QID]
		public Assignment getInputAssignment_3() { return cInputAssignment_3; }

		//[Entity|QID]
		public CrossReference getInputEntityCrossReference_3_0() { return cInputEntityCrossReference_3_0; }

		//QID
		public RuleCall getInputEntityQIDParserRuleCall_3_0_1() { return cInputEntityQIDParserRuleCall_3_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"|"
		public Keyword getVerticalLineKeyword_5() { return cVerticalLineKeyword_5; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_6() { return cHyphenMinusGreaterThanSignKeyword_6; }

		//output=[Entity|QID]
		public Assignment getOutputAssignment_7() { return cOutputAssignment_7; }

		//[Entity|QID]
		public CrossReference getOutputEntityCrossReference_7_0() { return cOutputEntityCrossReference_7_0; }

		//QID
		public RuleCall getOutputEntityQIDParserRuleCall_7_0_1() { return cOutputEntityQIDParserRuleCall_7_0_1; }
	}

	public class TypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFunctionTypeReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEntityTypeReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeReference:
		//	FunctionTypeReference | EntityTypeReference;
		public ParserRule getRule() { return rule; }

		//FunctionTypeReference | EntityTypeReference
		public Alternatives getAlternatives() { return cAlternatives; }

		//FunctionTypeReference
		public RuleCall getFunctionTypeReferenceParserRuleCall_0() { return cFunctionTypeReferenceParserRuleCall_0; }

		//EntityTypeReference
		public RuleCall getEntityTypeReferenceParserRuleCall_1() { return cEntityTypeReferenceParserRuleCall_1; }
	}

	public class FunctionTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionTypeReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDefinitionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cDefinitionEntityTypeCrossReference_0_0 = (CrossReference)cDefinitionAssignment_0.eContents().get(0);
		private final RuleCall cDefinitionEntityTypeQIDParserRuleCall_0_0_1 = (RuleCall)cDefinitionEntityTypeCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDomainAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cDomainEntityCrossReference_2_0 = (CrossReference)cDomainAssignment_2.eContents().get(0);
		private final RuleCall cDomainEntityQIDParserRuleCall_2_0_1 = (RuleCall)cDomainEntityCrossReference_2_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCodomainAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cCodomainEntityCrossReference_4_0 = (CrossReference)cCodomainAssignment_4.eContents().get(0);
		private final RuleCall cCodomainEntityQIDParserRuleCall_4_0_1 = (RuleCall)cCodomainEntityCrossReference_4_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//FunctionTypeReference:
		//	definition=[EntityType|QID] "[" domain=[Entity|QID] "->" codomain=[Entity|QID] "]";
		public ParserRule getRule() { return rule; }

		//definition=[EntityType|QID] "[" domain=[Entity|QID] "->" codomain=[Entity|QID] "]"
		public Group getGroup() { return cGroup; }

		//definition=[EntityType|QID]
		public Assignment getDefinitionAssignment_0() { return cDefinitionAssignment_0; }

		//[EntityType|QID]
		public CrossReference getDefinitionEntityTypeCrossReference_0_0() { return cDefinitionEntityTypeCrossReference_0_0; }

		//QID
		public RuleCall getDefinitionEntityTypeQIDParserRuleCall_0_0_1() { return cDefinitionEntityTypeQIDParserRuleCall_0_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//domain=[Entity|QID]
		public Assignment getDomainAssignment_2() { return cDomainAssignment_2; }

		//[Entity|QID]
		public CrossReference getDomainEntityCrossReference_2_0() { return cDomainEntityCrossReference_2_0; }

		//QID
		public RuleCall getDomainEntityQIDParserRuleCall_2_0_1() { return cDomainEntityQIDParserRuleCall_2_0_1; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }

		//codomain=[Entity|QID]
		public Assignment getCodomainAssignment_4() { return cCodomainAssignment_4; }

		//[Entity|QID]
		public CrossReference getCodomainEntityCrossReference_4_0() { return cCodomainEntityCrossReference_4_0; }

		//QID
		public RuleCall getCodomainEntityQIDParserRuleCall_4_0_1() { return cCodomainEntityQIDParserRuleCall_4_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}

	public class EntityTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EntityTypeReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDefinitionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cDefinitionEntityTypeCrossReference_0_0 = (CrossReference)cDefinitionAssignment_0.eContents().get(0);
		private final RuleCall cDefinitionEntityTypeQIDParserRuleCall_0_0_1 = (RuleCall)cDefinitionEntityTypeCrossReference_0_0.eContents().get(1);
		private final Assignment cManyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cManyPlusSignKeyword_1_0 = (Keyword)cManyAssignment_1.eContents().get(0);
		
		//EntityTypeReference:
		//	definition=[EntityType|QID] many?="+"?;
		public ParserRule getRule() { return rule; }

		//definition=[EntityType|QID] many?="+"?
		public Group getGroup() { return cGroup; }

		//definition=[EntityType|QID]
		public Assignment getDefinitionAssignment_0() { return cDefinitionAssignment_0; }

		//[EntityType|QID]
		public CrossReference getDefinitionEntityTypeCrossReference_0_0() { return cDefinitionEntityTypeCrossReference_0_0; }

		//QID
		public RuleCall getDefinitionEntityTypeQIDParserRuleCall_0_0_1() { return cDefinitionEntityTypeQIDParserRuleCall_0_0_1; }

		//many?="+"?
		public Assignment getManyAssignment_1() { return cManyAssignment_1; }

		//"+"
		public Keyword getManyPlusSignKeyword_1_0() { return cManyPlusSignKeyword_1_0; }
	}

	public class QIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNAMEParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cNAMEParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QID:
		//	NAME ("::" NAME)*;
		public ParserRule getRule() { return rule; }

		//NAME ("::" NAME)*
		public Group getGroup() { return cGroup; }

		//NAME
		public RuleCall getNAMEParserRuleCall_0() { return cNAMEParserRuleCall_0; }

		//("::" NAME)*
		public Group getGroup_1() { return cGroup_1; }

		//"::"
		public Keyword getColonColonKeyword_1_0() { return cColonColonKeyword_1_0; }

		//NAME
		public RuleCall getNAMEParserRuleCall_1_1() { return cNAMEParserRuleCall_1_1; }
	}

	public class NAMEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NAME");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//NAME:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDParserRuleCall_0() { return cIDParserRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDParserRuleCall_1_1() { return cIDParserRuleCall_1_1; }
	}

	public class IDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUCIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLCIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ID:
		//	UCID | LCID;
		public ParserRule getRule() { return rule; }

		//UCID | LCID
		public Alternatives getAlternatives() { return cAlternatives; }

		//UCID
		public RuleCall getUCIDTerminalRuleCall_0() { return cUCIDTerminalRuleCall_0; }

		//LCID
		public RuleCall getLCIDTerminalRuleCall_1() { return cLCIDTerminalRuleCall_1; }
	}
	
	
	private final MegamodelElements pMegamodel;
	private final DeclarationElements pDeclaration;
	private final PrefixAnnotationElements pPrefixAnnotation;
	private final ShowNameAnnotationElements pShowNameAnnotation;
	private final LinkElements pLink;
	private final EntityTypeElements pEntityType;
	private final RelationshipTypeElements pRelationshipType;
	private final EntityElements pEntity;
	private final RelationshipElements pRelationship;
	private final FunctionApplicationElements pFunctionApplication;
	private final TypeReferenceElements pTypeReference;
	private final FunctionTypeReferenceElements pFunctionTypeReference;
	private final EntityTypeReferenceElements pEntityTypeReference;
	private final QIDElements pQID;
	private final NAMEElements pNAME;
	private final IDElements pID;
	private final TerminalRule tUCID;
	private final TerminalRule tLCID;
	private final TerminalRule tSTRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tSEGMENT;
	
	private final Grammar grammar;

	@Inject
	public MegalGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pMegamodel = new MegamodelElements();
		this.pDeclaration = new DeclarationElements();
		this.pPrefixAnnotation = new PrefixAnnotationElements();
		this.pShowNameAnnotation = new ShowNameAnnotationElements();
		this.pLink = new LinkElements();
		this.pEntityType = new EntityTypeElements();
		this.pRelationshipType = new RelationshipTypeElements();
		this.pEntity = new EntityElements();
		this.pRelationship = new RelationshipElements();
		this.pFunctionApplication = new FunctionApplicationElements();
		this.pTypeReference = new TypeReferenceElements();
		this.pFunctionTypeReference = new FunctionTypeReferenceElements();
		this.pEntityTypeReference = new EntityTypeReferenceElements();
		this.pQID = new QIDElements();
		this.pNAME = new NAMEElements();
		this.pID = new IDElements();
		this.tUCID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UCID");
		this.tLCID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LCID");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS");
		this.tSEGMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SEGMENT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.softlang.megal.language.Megal".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Megamodel:
	//	annotations+=PrefixAnnotation* "model" name=QID ("import" imports+=[Megamodel|QID] | declarations+=Declaration |
	//	bindings+=Link)*;
	public MegamodelElements getMegamodelAccess() {
		return pMegamodel;
	}
	
	public ParserRule getMegamodelRule() {
		return getMegamodelAccess().getRule();
	}

	//Declaration:
	//	EntityType | RelationshipType | Entity | Relationship | FunctionApplication;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	//PrefixAnnotation returns Annotation:
	//	"@" key=QID value=STRING?;
	public PrefixAnnotationElements getPrefixAnnotationAccess() {
		return pPrefixAnnotation;
	}
	
	public ParserRule getPrefixAnnotationRule() {
		return getPrefixAnnotationAccess().getRule();
	}

	//ShowNameAnnotation returns Annotation:
	//	"[" value=STRING "]";
	public ShowNameAnnotationElements getShowNameAnnotationAccess() {
		return pShowNameAnnotation;
	}
	
	public ParserRule getShowNameAnnotationRule() {
		return getShowNameAnnotationAccess().getRule();
	}

	//Link:
	//	annotations+=PrefixAnnotation* link=[Entity|QID] ("(" input=[Entity|QID] ")" "|" "->" output=[Entity|QID])? "="
	//	to=STRING;
	public LinkElements getLinkAccess() {
		return pLink;
	}
	
	public ParserRule getLinkRule() {
		return getLinkAccess().getRule();
	}

	//EntityType:
	//	annotations+=PrefixAnnotation* name=QID annotations+=ShowNameAnnotation? ("<" supertype=TypeReference | "as"
	//	"entity");
	public EntityTypeElements getEntityTypeAccess() {
		return pEntityType;
	}
	
	public ParserRule getEntityTypeRule() {
		return getEntityTypeAccess().getRule();
	}

	//RelationshipType:
	//	annotations+=PrefixAnnotation* name=QID annotations+=ShowNameAnnotation? "<" left=TypeReference "*"
	//	right=TypeReference;
	public RelationshipTypeElements getRelationshipTypeAccess() {
		return pRelationshipType;
	}
	
	public ParserRule getRelationshipTypeRule() {
		return getRelationshipTypeAccess().getRule();
	}

	//Entity:
	//	annotations+=PrefixAnnotation* (dependent?="?" | parameter?="!")? name=QID annotations+=ShowNameAnnotation? ":"
	//	type=TypeReference;
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}

	//Relationship:
	//	annotations+=PrefixAnnotation* left=[Entity|QID] type=[RelationshipType|QID] right=[Entity|QID];
	public RelationshipElements getRelationshipAccess() {
		return pRelationship;
	}
	
	public ParserRule getRelationshipRule() {
		return getRelationshipAccess().getRule();
	}

	//FunctionApplication:
	//	annotations+=PrefixAnnotation* function=[Entity|QID] "(" input=[Entity|QID] ")" "|" "->" output=[Entity|QID];
	public FunctionApplicationElements getFunctionApplicationAccess() {
		return pFunctionApplication;
	}
	
	public ParserRule getFunctionApplicationRule() {
		return getFunctionApplicationAccess().getRule();
	}

	//TypeReference:
	//	FunctionTypeReference | EntityTypeReference;
	public TypeReferenceElements getTypeReferenceAccess() {
		return pTypeReference;
	}
	
	public ParserRule getTypeReferenceRule() {
		return getTypeReferenceAccess().getRule();
	}

	//FunctionTypeReference:
	//	definition=[EntityType|QID] "[" domain=[Entity|QID] "->" codomain=[Entity|QID] "]";
	public FunctionTypeReferenceElements getFunctionTypeReferenceAccess() {
		return pFunctionTypeReference;
	}
	
	public ParserRule getFunctionTypeReferenceRule() {
		return getFunctionTypeReferenceAccess().getRule();
	}

	//EntityTypeReference:
	//	definition=[EntityType|QID] many?="+"?;
	public EntityTypeReferenceElements getEntityTypeReferenceAccess() {
		return pEntityTypeReference;
	}
	
	public ParserRule getEntityTypeReferenceRule() {
		return getEntityTypeReferenceAccess().getRule();
	}

	//QID:
	//	NAME ("::" NAME)*;
	public QIDElements getQIDAccess() {
		return pQID;
	}
	
	public ParserRule getQIDRule() {
		return getQIDAccess().getRule();
	}

	//NAME:
	//	ID ("." ID)*;
	public NAMEElements getNAMEAccess() {
		return pNAME;
	}
	
	public ParserRule getNAMERule() {
		return getNAMEAccess().getRule();
	}

	//ID:
	//	UCID | LCID;
	public IDElements getIDAccess() {
		return pID;
	}
	
	public ParserRule getIDRule() {
		return getIDAccess().getRule();
	}

	/// **
	//	 * Upper case identifier, most likely an entity
	//	 * / terminal UCID:
	//	"^"? ("A".."Z" | "0".."9") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getUCIDRule() {
		return tUCID;
	} 

	/// **
	//	 * Lower case identifier, most likely a relationship
	//	 * / terminal LCID:
	//	"^"? ("a".."z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getLCIDRule() {
		return tLCID;
	} 

	/// **
	//	 * String, for annotation values
	//	 * / terminal STRING:
	//	"\"" ("\\" . | !("\\" | "\""))* "\"" | "\'" ("\\" . | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return tWS;
	} 

	/// **
	//	 * Segment of an URI
	//	 * / terminal fragment SEGMENT:
	//	("A".."Z" | "a".."z" | "0".."9" | "-" | "." | "_" | "~" | ":" | "?" | "#" | "[" | "]" | "@" | "!" | "$" | "&" | "\'" |
	//	"(" | ")" | "*" | "+" | "," | ";" | "=")+;
	public TerminalRule getSEGMENTRule() {
		return tSEGMENT;
	} 
}
