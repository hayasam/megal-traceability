model Prelude

Entity as entity

// Entity types
Artifact < Entity
Concept < Entity
Function < Entity
FunctionApplication < Entity
Set < Entity
Technology < Entity
Language < Set

@Color '255,0,0'
File < Artifact
Folder < Artifact
Fragment < Artifact

// Relationship types
elementOf < Entity * Set

subsetOf < Set * Set

partOf < Artifact * Artifact
partOf < Artifact * Technology
partOf < Technology * Technology
partOf < Language * Technology

elementOf < FunctionApplication * Function
inputOf < Artifact * FunctionApplication
outputOf < Artifact * FunctionApplication

instanceOf < Concept * Concept

isA < Concept * Concept

conformsTo < Artifact * Artifact

dependsOn < Artifact * Artifact
dependsOn < Technology * Language
dependsOn < Technology * Technology
// VERMUTLICH FALSCH
dependsOn < Function * Technology

transformableIn < Language * Language
transformedIn < Language * Language
transformedIn < Artifact * Artifact

correspondsTo < File * File

defines < Artifact * Language
defines < Artifact * Function // Ohne typenparameter universell

linksTo < File * File

realizationOf < Artifact * Function

// XHTML variantOf HTML
variantOf < Language * Language
versionOf < Language * Language

// a deployment perspective, where one technology is used as a container for deployment and execution of the other one
deploysTo < Technology * Technology

Program: Entity

// NEW
correspondsTo < File * File+

partOf < Language * Language


// EVEN NEWER

// New entity types
Evaluator < Entity
Resolver < Entity

// Binding an evaluator specific to an entity
realizationOf < Evaluator * Entity

// Specifying plug-in relationship of evaluators
partOf < Evaluator * Evaluator


// Defining an evaluator for the relationship elementOf between File and language
@Plugin 'FileElementOfLanguage'
elementOf < File * Language

// Dispatcher with master as link and parameter dependence
FileElementOfLanguage: Evaluator
FileElementOfLanguage = "pluginroot.elementof.FileElementOfLanguage"


